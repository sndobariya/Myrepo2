{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Join1jj"
				},
				{
					"name": "Lookup1"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "Sort1"
				}
			],
			"script": "source(output(\n\t\tEmp_Id as string,\n\t\tEmp_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource(output(\n\t\tEmp_Id as string,\n\t\tEmp_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source2\nsource(output(\n\t\tEmp_Id as string,\n\t\tEmp_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source3\nsource1, source2 join(source1@Emp_Id == source2@Emp_Id,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1jj\nJoin1jj, source3 lookup(source1@Emp_Id == source3@Emp_Id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(source3@Emp_Id, true),\n\tbroadcast: 'none')~> Lookup1\nLookup1 split(toInteger(source1@Emp_Id)==1,\n\ttoInteger(source1@Emp_Id)!=1,\n\tdisjoint: true) ~> ConditionalSplit1@(unique, duplicate, default)\nConditionalSplit1@unique sort(asc(ConditionalSplit1@unique@Emp_Id, true),\n\tcaseInsensitive: true) ~> Sort1\nSort1 sink(input(\n\t\tEmp_Id as integer,\n\t\tEmp_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}